# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2024-12-13T23:50:23+00:00

from __future__ import annotations

import httpx
from fastapi import FastAPI

from mtg_ai.ai.rag import MTGRAGSearchSystem
from mtg_ai.cards.database import MTGDatabase
from mtg_ai_rag_webserver.models import ErrorResponse, RagRequest, RAGResponse

app = FastAPI(
    title="MTG AI RAG Webserver",
    description="MTG AI RAG",
    contact={"name": "Thomas Meyer"},
    license={
        "name": "MIT",
        "url": "https://www.apache.org/licenses/LICENSE-2.0",
    },
    version="0.1.0",
)

web_client = httpx.AsyncClient()

rag_embedding_model_name: str = "sentence-transformers/all-MiniLM-L6-v2"
card_database = MTGDatabase()
rag_service = MTGRAGSearchSystem(
    database=card_database, embedding_model=rag_embedding_model_name
)


@app.post(
    "/query",
    response_model=RAGResponse,
    responses={
        "422": {"model": ErrorResponse},
        "424": {"model": ErrorResponse},
        "429": {"model": ErrorResponse},
        "500": {"model": ErrorResponse},
    },
)
def query(query: RagRequest):
    result = rag_service.search(query.query, query.filters, query.top_k)
    result_str = "\n".join(result)
    return RAGResponse(response=result_str)


@app.post("/index")
def index():
    rag_service.index()
    return {"message": "Indexing complete"}


@app.delete("/index/{doc_id}")
def delete(doc_id: str):
    # rag_service.delete(doc_id)
    return {"message": "Document deleted"}


@app.get("/status")
def status():
    return {"status": "ok"}


@app.post("/update-embeddings")
def update_embeddings():
    # rag_service.update_embeddings()
    return {"message": "Embeddings updated"}
