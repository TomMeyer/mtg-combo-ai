# generated by fastapi-codegen:
#   filename:  ./src/mtg_ai_webserver/openapi.json
#   timestamp: 2024-12-13T23:50:23+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional, Union

from pydantic import (
    BaseModel,
    Field,
    PositiveFloat,
    PositiveInt,
    RootModel,
)
from typing_extensions import Literal


class ChatCompletionTopLogprob(BaseModel):
    logprob: float
    token: str


class Object(Enum):
    text_completion = "text_completion"


class CompletionComplete(BaseModel):
    finish_reason: str
    index: Annotated[int, Field(ge=0)]
    logprobs: Optional[List[float]] = None
    text: str


class ErrorResponse(BaseModel):
    error: str
    error_type: str


class FinishReason(Enum):
    length = "length"
    eos_token = "eos_token"
    stop_sequence = "stop_sequence"


class Function(BaseModel):
    arguments: str
    name: Optional[str] = None


class FunctionDefinition(BaseModel):
    arguments: Any
    description: Optional[str] = None
    name: str


class FunctionName(BaseModel):
    name: str


class Type(Enum):
    json = "json"


class GrammarType1(BaseModel):
    type: Literal["0#-datamodel-code-generator-#-object-#-special-#"]
    value: Any = Field(
        ...,
        description="A string that represents a [JSON Schema](https://json-schema.org/).\n\nJSON Schema is a declarative language that allows to annotate JSON documents\nwith types and descriptions.",
    )


class Type1(Enum):
    regex = "regex"


class GrammarType2(BaseModel):
    type: Literal["1#-datamodel-code-generator-#-object-#-special-#"]
    value: str


class GrammarType(RootModel[Union[GrammarType1, GrammarType2]]):
    root: Union[GrammarType1, GrammarType2] = Field(..., discriminator="type")


class Info(BaseModel):
    docker_label: Optional[str] = Field(None, examples=[None])
    max_best_of: Annotated[int, Field(ge=0)] = Field(..., examples=["2"])
    max_client_batch_size: Annotated[int, Field(ge=0)] = Field(..., examples=["32"])
    max_concurrent_requests: Annotated[int, Field(ge=0)] = Field(
        ..., description="Router Parameters", examples=["128"]
    )
    max_input_tokens: Annotated[int, Field(ge=0)] = Field(..., examples=["1024"])
    max_stop_sequences: Annotated[int, Field(ge=0)] = Field(..., examples=["4"])
    max_total_tokens: Annotated[int, Field(ge=0)] = Field(..., examples=["2048"])
    model_id: str = Field(
        ..., description="Model info", examples=["bigscience/blomm-560m"]
    )
    model_pipeline_tag: Optional[str] = Field(None, examples=["text-generation"])
    model_sha: Optional[str] = Field(
        None, examples=["e985a63cdc139290c5f700ff1929f0b5942cced2"]
    )
    router: str = Field(
        ..., description="Router Info", examples=["text-generation-router"]
    )
    sha: Optional[str] = Field(None, examples=[None])
    validation_workers: Annotated[int, Field(ge=0)] = Field(..., examples=["2"])
    version: str = Field(..., examples=["0.5.0"])


class Type2(Enum):
    text = "text"


class MessageChunk1(BaseModel):
    text: str
    type: Literal["0#-datamodel-code-generator-#-object-#-special-#"]


class Type3(Enum):
    image_url = "image_url"


class ModelInfo(BaseModel):
    created: Annotated[int, Field(ge=0)] = Field(..., examples=[1686935002])
    id: str = Field(..., examples=["gpt2"])
    object: str = Field(..., examples=["model"])
    owned_by: str = Field(..., examples=["openai"])


class PrefillToken(BaseModel):
    id: Annotated[int, Field(ge=0)] = Field(..., examples=[0])
    logprob: float = Field(..., examples=[-0.34])
    text: str = Field(..., examples=["test"])


class Prompt(RootModel[List[str]]):
    root: List[str]


class SimpleToken(BaseModel):
    id: Annotated[int, Field(ge=0)] = Field(..., examples=[0])
    start: Annotated[int, Field(ge=0)] = Field(..., examples=[0])
    stop: Annotated[int, Field(ge=0)] = Field(..., examples=[2])
    text: str = Field(..., examples=["test"])


class StreamDetails(BaseModel):
    finish_reason: FinishReason
    generated_tokens: Annotated[int, Field(ge=0)] = Field(..., examples=[1])
    input_length: Annotated[int, Field(ge=0)] = Field(..., examples=[1])
    seed: Optional[Annotated[int, Field(ge=0)]] = Field(None, examples=[42])


class StreamOptions(BaseModel):
    include_usage: bool = Field(
        ...,
        description="If set, an additional chunk will be streamed before the data: [DONE] message. The usage field on this chunk shows the token usage statistics for the entire request, and the choices field will always be an empty array. All other chunks will also include a usage field, but with a null value.",
        examples=[True],
    )


class TextMessage(BaseModel):
    content: str = Field(..., examples=["My name is David and I"])
    role: str = Field(..., examples=["user"])


class Token(BaseModel):
    id: Annotated[int, Field(ge=0)] = Field(..., examples=[0])
    logprob: float = Field(..., examples=[-0.34])
    special: bool = Field(..., examples=[False])
    text: str = Field(..., examples=["test"])


class TokenizeResponse(RootModel[List[SimpleToken]]):
    root: List[SimpleToken]


class Tool(BaseModel):
    function: FunctionDefinition
    type: str = Field(..., examples=["function"])


class ToolCall(BaseModel):
    function: FunctionDefinition
    id: str
    type: str


class ToolCallMessage(BaseModel):
    role: str = Field(..., examples=["assistant"])
    tool_calls: List[ToolCall]


class ToolChoice1(Enum):
    auto = "auto"


class ToolChoice2(Enum):
    none = "none"


class ToolChoice3(Enum):
    required = "required"


class ToolChoice4(BaseModel):
    function: FunctionName


class ToolChoice(RootModel[Union[ToolChoice1, ToolChoice2, ToolChoice3, ToolChoice4]]):
    root: Union[ToolChoice1, ToolChoice2, ToolChoice3, ToolChoice4] = Field(
        ...,
        description="<https://platform.openai.com/docs/guides/function-calling/configuring-function-calling-behavior-using-the-tool_choice-parameter>",
    )


class Url(BaseModel):
    url: str


class Usage(BaseModel):
    completion_tokens: Annotated[int, Field(ge=0)]
    prompt_tokens: Annotated[int, Field(ge=0)]
    total_tokens: Annotated[int, Field(ge=0)]


class BestOfSequence(BaseModel):
    finish_reason: FinishReason
    generated_text: str = Field(..., examples=["test"])
    generated_tokens: Annotated[int, Field(ge=0)] = Field(..., examples=[1])
    prefill: List[PrefillToken]
    seed: Optional[Annotated[int, Field(ge=0)]] = Field(None, examples=[42])
    tokens: List[Token]
    top_tokens: Optional[List[List[Token]]] = None


class ChatCompletionLogprob(BaseModel):
    logprob: float
    token: str
    top_logprobs: List[ChatCompletionTopLogprob]


class ChatCompletionLogprobs(BaseModel):
    content: List[ChatCompletionLogprob]


class ChatTokenizeResponse(BaseModel):
    templated_text: str
    tokenize_response: TokenizeResponse


class Chunk(BaseModel):
    choices: List[CompletionComplete]
    created: Annotated[int, Field(ge=0)]
    id: str
    model: str
    system_fingerprint: str


class Completion1(Chunk):
    object: Literal["0#-datamodel-code-generator-#-allOf-#-special-#"]


class CompletionFinal(BaseModel):
    choices: List[CompletionComplete]
    created: Annotated[int, Field(ge=0)] = Field(..., examples=["1706270835"])
    id: str
    model: str = Field(..., examples=["mistralai/Mistral-7B-Instruct-v0.2"])
    system_fingerprint: str
    usage: Usage


class CompletionRequest(BaseModel):
    frequency_penalty: Optional[float] = Field(
        None,
        description="Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far,\ndecreasing the model's likelihood to repeat the same line verbatim.",
        examples=["1.0"],
    )
    max_tokens: Optional[Annotated[int, Field(ge=0)]] = Field(
        1024,
        description="The maximum number of tokens that can be generated in the chat completion.",
        examples=["32"],
    )
    model: Optional[str] = Field(
        None,
        description="UNUSED\nID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API.",
        examples=["mistralai/Mistral-7B-Instruct-v0.2"],
    )
    prompt: Prompt
    repetition_penalty: Optional[float] = None
    seed: Optional[Annotated[int, Field(ge=0)]] = Field(None, examples=[42])
    stop: Optional[List[str]] = Field(
        None,
        description="Up to 4 sequences where the API will stop generating further tokens.",
        examples=[None],
    )
    stream: Optional[bool] = None
    suffix: Optional[str] = Field(
        None,
        description="The text to append to the prompt. This is useful for completing sentences or generating a paragraph of text.\nplease see the completion_template field in the model's tokenizer_config.json file for completion template.",
    )
    temperature: Optional[float] = Field(
        None,
        description="What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while\nlower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both.",
        examples=[1.0],
    )
    top_p: Optional[float] = Field(
        None,
        description="An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the\ntokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.",
        examples=[0.95],
    )


class DeltaToolCall(BaseModel):
    function: Function
    id: str
    index: Annotated[int, Field(ge=0)]
    type: str


class Details(BaseModel):
    best_of_sequences: Optional[List[BestOfSequence]] = None
    finish_reason: FinishReason
    generated_tokens: Annotated[int, Field(ge=0)] = Field(..., examples=[1])
    prefill: List[PrefillToken]
    seed: Optional[Annotated[int, Field(ge=0)]] = Field(None, examples=[42])
    tokens: List[Token]
    top_tokens: Optional[List[List[Token]]] = None


class GenerateParameters(BaseModel):
    adapter_id: Optional[str] = Field(
        None, description="Lora adapter id", examples=[None]
    )
    best_of: Optional[PositiveInt] = Field(
        None,
        description="Generate best_of sequences and return the one if the highest token logprobs.",
        examples=[1],
    )
    decoder_input_details: Optional[bool] = Field(
        False, description="Whether to return decoder input token logprobs and ids."
    )
    details: Optional[bool] = Field(
        True, description="Whether to return generation details."
    )
    do_sample: Optional[bool] = Field(
        False, description="Activate logits sampling.", examples=[True]
    )
    frequency_penalty: Optional[Annotated[float, Field(ge=-2.0)]] = Field(
        None,
        description="The parameter for frequency penalty. 1.0 means no penalty\nPenalize new tokens based on their existing frequency in the text so far,\ndecreasing the model's likelihood to repeat the same line verbatim.",
        examples=[0.1],
    )
    grammar: Optional[GrammarType] = Field(
        default_factory=lambda: GrammarType.model_validate(None)
    )
    max_new_tokens: Optional[Annotated[int, Field(ge=0)]] = Field(
        1024, description="Maximum number of tokens to generate.", examples=["20"]
    )
    repetition_penalty: Optional[PositiveFloat] = Field(
        None,
        description="The parameter for repetition penalty. 1.0 means no penalty.\nSee [this paper](https://arxiv.org/pdf/1909.05858.pdf) for more details.",
        examples=[1.03],
    )
    return_full_text: Optional[bool] = Field(
        None,
        description="Whether to prepend the prompt to the generated text",
        examples=[False],
    )
    seed: Optional[PositiveInt] = Field(
        None, description="Random sampling seed.", examples=[None]
    )
    stop: Optional[List[str]] = Field(
        None,
        description="Stop generating tokens if a member of `stop` is generated.",
        examples=[["photographer"]],
        max_length=4,
    )
    temperature: Optional[PositiveFloat] = Field(
        None,
        description="The value used to module the logits distribution.",
        examples=[0.5],
    )
    top_k: Optional[PositiveInt] = Field(
        None,
        description="The number of highest probability vocabulary tokens to keep for top-k-filtering.",
        examples=[10],
    )
    top_n_tokens: Optional[PositiveInt] = Field(
        None,
        description="The number of highest probability vocabulary tokens to keep for top-n-filtering.",
        examples=[5],
    )
    top_p: Optional[Annotated[float, Field(le=1.0, gt=0.0)]] = Field(
        None, description="Top-p value for nucleus sampling.", examples=[0.95]
    )
    truncate: Optional[Annotated[int, Field(ge=0)]] = Field(
        None,
        description="Truncate inputs tokens to the given size.",
        examples=[None],
    )
    typical_p: Optional[Annotated[float, Field(le=1.0, gt=0.0)]] = Field(
        None,
        description="Typical Decoding mass\nSee [Typical Decoding for Natural Language Generation](https://arxiv.org/abs/2202.00666) for more information.",
        examples=[0.95],
    )
    watermark: Optional[bool] = Field(
        False,
        description="Watermarking with [A Watermark for Large Language Models](https://arxiv.org/abs/2301.10226).",
        examples=[True],
    )


class GenerateRequest(BaseModel):
    inputs: str = Field(..., examples=["My name is Olivier and I"])
    parameters: Optional[GenerateParameters] = None


class GenerateResponse(BaseModel):
    details: Optional[Details] = None
    generated_text: str = Field(..., examples=["test"])


class MessageChunk2(BaseModel):
    image_url: Url
    type: Literal["1#-datamodel-code-generator-#-object-#-special-#"]


class MessageChunk(RootModel[Union[MessageChunk1, MessageChunk2]]):
    root: Union[MessageChunk1, MessageChunk2] = Field(..., discriminator="type")


class MessageContent(RootModel[Union[str, List[MessageChunk]]]):
    root: Union[str, List[MessageChunk]]


class OutputMessage(RootModel[Union[TextMessage, ToolCallMessage]]):
    root: Union[TextMessage, ToolCallMessage]


class StreamResponse(BaseModel):
    details: Optional[StreamDetails] = Field(
        default_factory=lambda: StreamDetails.model_validate(None)
    )
    generated_text: Optional[str] = Field(None, examples=["test"])
    index: Annotated[int, Field(ge=0)]
    token: Token
    top_tokens: Optional[List[Token]] = None


class ToolCallDelta(BaseModel):
    role: str = Field(..., examples=["assistant"])
    tool_calls: DeltaToolCall


class FieldDatamodelCodeGeneratorRootSpecialPostResponse(
    RootModel[List[GenerateResponse]]
):
    root: List[GenerateResponse]


class ChatCompletionComplete(BaseModel):
    finish_reason: str
    index: Annotated[int, Field(ge=0)]
    logprobs: Optional[ChatCompletionLogprobs] = None
    message: OutputMessage


class ChatCompletionDelta(RootModel[Union[TextMessage, ToolCallDelta]]):
    root: Union[TextMessage, ToolCallDelta]


class CompatGenerateRequest(BaseModel):
    inputs: str = Field(..., examples=["My name is Olivier and I"])
    parameters: Optional[GenerateParameters] = None
    stream: Optional[bool] = False


class Completion2(CompletionFinal):
    object: Literal["1#-datamodel-code-generator-#-allOf-#-special-#"]


class Completion(RootModel[Union[Completion1, Completion2]]):
    root: Union[Completion1, Completion2] = Field(..., discriminator="object")


class Message(BaseModel):
    content: MessageContent
    name: Optional[str] = Field(None, examples=['"David"'])
    role: str = Field(..., examples=["user"])


class ChatCompletion(BaseModel):
    choices: List[ChatCompletionComplete]
    created: Annotated[int, Field(ge=0)] = Field(..., examples=["1706270835"])
    id: str
    model: str = Field(..., examples=["mistralai/Mistral-7B-Instruct-v0.2"])
    system_fingerprint: str
    usage: Usage


class ChatCompletionChoice(BaseModel):
    delta: ChatCompletionDelta
    finish_reason: Optional[str] = None
    index: Annotated[int, Field(ge=0)]
    logprobs: Optional[ChatCompletionLogprobs] = None


class ChatCompletionChunk(BaseModel):
    choices: List[ChatCompletionChoice]
    created: Annotated[int, Field(ge=0)] = Field(..., examples=["1706270978"])
    id: str
    model: str = Field(..., examples=["mistralai/Mistral-7B-Instruct-v0.2"])
    system_fingerprint: str
    usage: Optional[Usage] = None


class ChatRequest(BaseModel):
    frequency_penalty: Optional[float] = Field(
        None,
        description="Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far,\ndecreasing the model's likelihood to repeat the same line verbatim.",
        examples=["1.0"],
    )
    logit_bias: Optional[List[float]] = Field(
        None,
        description="UNUSED\nModify the likelihood of specified tokens appearing in the completion. Accepts a JSON object that maps tokens\n(specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically,\nthe bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model,\nbut values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should\nresult in a ban or exclusive selection of the relevant token.",
    )
    logprobs: Optional[bool] = Field(
        None,
        description="Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each\noutput token returned in the content of message.",
        examples=[False],
    )
    max_tokens: Optional[Annotated[int, Field(ge=0)]] = Field(
        1024,
        description="The maximum number of tokens that can be generated in the chat completion.",
        examples=["32"],
    )
    messages: List[Message] = Field(
        ...,
        description="A list of messages comprising the conversation so far.",
        examples=['[{"role": "user", "content": "What is Deep Learning?"}]'],
    )
    model: Optional[str] = Field(
        None,
        description="[UNUSED] ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API.",
        examples=["mistralai/Mistral-7B-Instruct-v0.2"],
    )
    n: Optional[Annotated[int, Field(ge=0)]] = Field(
        None,
        description="UNUSED\nHow many chat completion choices to generate for each input message. Note that you will be charged based on the\nnumber of generated tokens across all of the choices. Keep n as 1 to minimize costs.",
        examples=["2"],
    )
    presence_penalty: Optional[float] = Field(
        None,
        description="Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,\nincreasing the model's likelihood to talk about new topics",
        examples=[0.1],
    )
    response_format: Optional[GrammarType] = Field(
        default_factory=lambda: GrammarType.model_validate(None)
    )
    seed: Optional[Annotated[int, Field(ge=0)]] = Field(None, examples=[42])
    stop: Optional[List[str]] = Field(
        None,
        description="Up to 4 sequences where the API will stop generating further tokens.",
        examples=[None],
    )
    stream: Optional[bool] = None
    stream_options: Optional[StreamOptions] = None
    temperature: Optional[float] = Field(
        None,
        description="What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while\nlower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.",
        examples=[1.0],
    )
    tool_choice: Optional[ToolChoice] = Field(
        default_factory=lambda: ToolChoice.model_validate("auto")
    )
    tool_prompt: Optional[str] = Field(
        None,
        description="A prompt to be appended before the tools",
        examples=[
            "Given the functions available, please respond with a JSON for a function call with its proper arguments that best answers the given prompt. Respond in the format {name: function name, parameters: dictionary of argument name and its value}.Do not use variables."
        ],
    )
    tools: Optional[List[Tool]] = Field(
        None,
        description="A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of\nfunctions the model may generate JSON inputs for.",
        examples=[None],
    )
    top_logprobs: Optional[Annotated[int, Field(ge=0)]] = Field(
        None,
        description="An integer between 0 and 5 specifying the number of most likely tokens to return at each token position, each with\nan associated log probability. logprobs must be set to true if this parameter is used.",
        examples=["5"],
    )
    top_p: Optional[float] = Field(
        None,
        description="An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the\ntokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.",
        examples=[0.95],
    )


class SagemakerRequest(
    RootModel[Union[CompatGenerateRequest, ChatRequest, CompletionRequest]]
):
    root: Union[CompatGenerateRequest, ChatRequest, CompletionRequest]


class SagemakerResponse(
    RootModel[Union[GenerateResponse, ChatCompletion, CompletionFinal]]
):
    root: Union[GenerateResponse, ChatCompletion, CompletionFinal]


class SagemakerStreamResponse(
    RootModel[Union[StreamResponse, ChatCompletionChunk, Chunk]]
):
    root: Union[StreamResponse, ChatCompletionChunk, Chunk]


class RagRequest(BaseModel):
    query: str
    filters: Optional[dict[str, Any]] = None
    top_k: int = 10
